package com.example.bootapitest.jdknew.two;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import javax.xml.transform.*;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;import java.io.IOException;import java.io.StringReader;import java.io.StringWriter;/** * Created by liufeng on 17/3/6. */public class XmlUtil {    public final static String ELEMENT_TABLE = "table";    public final static String ELEMENT_ROW_COUNT = "rowCount";    public final static String ELEMENT_HEAD_COUNT = "headCount";    public final static String ELEMENT_HEAD = "head";    public final static String ELEMENT_BODY = "body";    public final static String ELEMENT_H = "h";    public final static String ELEMENT_R = "r";    public final static String ELEMENT_C = "c";    public final static String XmlToString(Document doc) {        TransformerFactory tf = TransformerFactory.newInstance();        StringWriter sw = null;        try {            Transformer transformer = tf.newTransformer();            DOMSource source = new DOMSource(doc);            transformer.setOutputProperty(OutputKeys.ENCODING, "utf-8");            transformer.setOutputProperty(OutputKeys.INDENT, "yes");            sw = new StringWriter();            StreamResult result = new StreamResult(sw);            transformer.transform(source, result);        } catch (TransformerConfigurationException e) {            e.printStackTrace();        } catch (IllegalArgumentException e) {            e.printStackTrace();        } catch (TransformerException e) {            e.printStackTrace();        }        return sw.toString();    }    public final static Document StringToXml(String xml) {        Document doc = null;        if (xml == null || xml.equals("")) {            try {                DocumentBuilderFactory factory = DocumentBuilderFactory                        .newInstance();                DocumentBuilder builder = factory.newDocumentBuilder();                doc = builder.newDocument();            } catch (ParserConfigurationException e) {                e.printStackTrace();            }        } else {            try {                DocumentBuilderFactory dbf = DocumentBuilderFactory                        .newInstance();                DocumentBuilder db = dbf.newDocumentBuilder();                doc = db.parse(new InputSource(new StringReader(xml)));            } catch (ParserConfigurationException e) {                e.printStackTrace();            } catch (SAXException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }        }        return doc;    }    public final static String tableFormatXml(String[] head, String[][] body) {        if (body == null || head == null || head.length == 0)            return null;        Document root = StringToXml(null);        Element table = root.createElement(ELEMENT_TABLE);        root.appendChild(table);        Element rowCount = root.createElement(ELEMENT_ROW_COUNT);        rowCount.setTextContent(String.valueOf(body.length));        table.appendChild(rowCount);        Element headCount = root.createElement(ELEMENT_HEAD_COUNT);        headCount.setTextContent(String.valueOf(head.length));        table.appendChild(headCount);        Element tabHead = root.createElement(ELEMENT_HEAD);        table.appendChild(tabHead);        Element index;        StringBuffer text;        for (int i = 0; i < head.length; i++) {            text = new StringBuffer();            text.append(ELEMENT_H);            text.append(i + 1);            index = root.createElement(text.toString());            index.setTextContent(head[i]);            tabHead.appendChild(index);        }        if (body.length == 0 || head.length != body[0].length)            return XmlToString(root);        Element tabBody = root.createElement(ELEMENT_BODY);        table.appendChild(tabBody);        Element row, column;        for (int i = 0; i < body.length; i++) {            text = new StringBuffer();            text.append(ELEMENT_R);            text.append(i + 1);            row = root.createElement(text.toString());            tabBody.appendChild(row);            for (int j = 0; j < body[i].length; j++) {                text = new StringBuffer();                text.append(row.getTagName());                text.append(ELEMENT_C);                text.append(j + 1);                column = root.createElement(text.toString());                column.setTextContent(body[i][j]);                row.appendChild(column);            }        }        return XmlToString(root);    }    public final static String[][] getTableBodyFromXml(String xml) {        Document root = StringToXml(xml);        Element headCount = getElementByTagName(root, ELEMENT_HEAD_COUNT);        Element rowCount = getElementByTagName(root, ELEMENT_ROW_COUNT);        String[][] table = new String[Integer.parseInt(rowCount                .getTextContent())][Integer                .parseInt(headCount.getTextContent())];        Node col;        StringBuffer text;        for (int i = 0; i < table.length; i++) {            for (int j = 0; j < table[0].length; j++) {                text = new StringBuffer();                text.append(ELEMENT_R);                text.append(i + 1);                text.append(ELEMENT_C);                text.append(j + 1);                col = getElementByTagName(root, text.toString());                table[i][j] = col.getTextContent();            }        }        return table;    }    public final static String[] getTableHeadFromXml(String xml) {        Document root = StringToXml(xml);        Element headCount = getElementByTagName(root, ELEMENT_HEAD_COUNT);        String[] head = new String[Integer.parseInt(headCount.getTextContent())];        Node col;        StringBuffer text;        for (int i = 0; i < head.length; i++) {            text = new StringBuffer();            text.append(ELEMENT_H);            text.append(i + 1);            col = getElementByTagName(root, text.toString());            head[i] = col.getTextContent();        }        return head;    }    private final static Element getElementByTagName(Document doc, String s) {        NodeList nl = doc.getElementsByTagName(s);        return (Element) nl.item(0);    }}